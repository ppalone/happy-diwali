{"version":3,"sources":["app.js"],"names":["canvas","document","querySelector","width","window","innerWidth","height","innerHeight","WIDTH","HEIGHT","ctx","getContext","fireworks","particles","GRAVITY","FRICTION","Firework","fx","fy","color","x","y","speed","blown","draw","PARTICLE_COUNT","ANGLE","Math","PI","i","push","Particle","cos","random","sin","fillStyle","fill","fillRect","velocity","alpha","save","globalAlpha","max","beginPath","arc","strokeStyle","stroke","restore","animate","forEach","firework","idx","splice","update","particle","requestAnimationFrame","setInterval","pos","console","log"],"mappings":"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","file":"app.5b18f223.js","sourceRoot":"../src","sourcesContent":["const canvas = document.querySelector('#canvas');\n\ncanvas.width = window.innerWidth;\ncanvas.height = window.innerHeight;\n\nconst WIDTH = window.innerWidth;\nconst HEIGHT = window.innerHeight;\n\nconst ctx = canvas.getContext('2d');\n\nconst fireworks = [];\nconst particles = [];\n\nconst GRAVITY = 0.005;\nconst FRICTION = 0.999;\n\nclass Firework {\n  constructor(fx, fy, color) {\n    this.x = fx;\n    this.y = HEIGHT;\n    this.fx = fx;\n    this.fy = fy;\n    this.speed = 5;\n    this.blown = false;\n    this.color = color;\n  }\n\n  update() {\n    this.draw();\n    if (this.y < this.fy) {\n      // console.log(this.y, this.fy);\n      this.blown = true;\n\n      // Generate Particles\n      const PARTICLE_COUNT = 200;\n      const ANGLE = (Math.PI * 2) / PARTICLE_COUNT;\n\n      for (let i = 0; i < PARTICLE_COUNT; i++) {\n        particles.push(\n          new Particle(this.x, this.y, this.color, {\n            x: Math.cos(ANGLE * i) * Math.random(),\n            y: Math.sin(ANGLE * i) * Math.random(),\n          })\n        );\n      }\n    } else {\n      this.y -= this.speed;\n    }\n    // return this.blown;\n    // console.log(this.y);\n  }\n\n  draw() {\n    // ctx.globalAlpha = 1;\n    ctx.fillStyle = this.color;\n    ctx.fill();\n    ctx.fillRect(this.x - 1, this.y, 2, 4);\n  }\n}\n\nclass Particle {\n  constructor(x, y, color, velocity) {\n    this.x = x;\n    this.y = y;\n    this.color = color;\n    this.velocity = velocity;\n    this.alpha = 1;\n  }\n\n  draw() {\n    ctx.save();\n    ctx.globalAlpha = Math.max(this.alpha, 0);\n    ctx.beginPath();\n    ctx.arc(this.x, this.y, 2, 0, Math.PI * 2, false);\n    ctx.fillStyle = this.color;\n    ctx.strokeStyle = 'transparent';\n    ctx.fill();\n    ctx.stroke();\n    ctx.restore();\n  }\n\n  update() {\n    this.velocity.x *= FRICTION;\n    this.velocity.y += GRAVITY;\n\n    this.x += this.velocity.x;\n    this.y += this.velocity.y;\n    this.alpha -= 0.005;\n    this.draw();\n  }\n}\n\nfunction animate() {\n  // ctx.clearRect(0, 0, WIDTH, HEIGHT);\n  ctx.fillStyle = 'rgba(0, 0, 0, 0.50)';\n  ctx.fillRect(0, 0, WIDTH, HEIGHT);\n\n  fireworks.forEach((firework, idx) => {\n    if (firework.blown) {\n      fireworks.splice(idx, 1);\n    } else {\n      firework.update();\n    }\n  });\n\n  particles.forEach((particle, idx) => {\n    if (particle.alpha < 0) {\n      particles.splice(idx, 1);\n    } else {\n      particle.update();\n    }\n  });\n\n  requestAnimationFrame(animate);\n}\n\nanimate();\n\nsetInterval(function () {\n  let pos = { x: Math.random() * WIDTH, y: (Math.random() * HEIGHT) / 2 };\n  let color = `rgb(${Math.random() * 255}, ${Math.random() * 255}, ${\n    Math.random() * 255\n  })`;\n  // const PARTICLE_COUNT = 200;\n  // const ANGLE = (Math.PI * 2) / PARTICLE_COUNT;\n\n  // for (let i = 0; i < PARTICLE_COUNT; i++) {\n  //   particles.push(\n  //     new Particle(pos.x, pos.y, color, {\n  //       x: Math.cos(ANGLE * i) * Math.random(),\n  //       y: Math.sin(ANGLE * i) * Math.random(),\n  //     })\n  //   );\n  // }\n\n  fireworks.push(new Firework(pos.x, pos.y, color));\n  console.log(fireworks);\n}, 2000);\n\n// particles.push(new Particle(Math.random() * WIDTH, Math.random() * HEIGHT / 2, 'white'));\n\n// TEST\n// let pos = { x: Math.random() * WIDTH, y: (Math.random() * HEIGHT) / 1.5 };\n\n// const PARTICLE_COUNT = 200;\n// const ANGLE = (Math.PI * 2) / PARTICLE_COUNT;\n\n// for (let i = 0; i < PARTICLE_COUNT; i++) {\n//   particles.push(\n//     new Particle(pos.x, pos.y, 'white', {\n//       x: Math.cos(ANGLE * i) * Math.random(),\n//       y: Math.sin(ANGLE * i) * Math.random(),\n//     })\n//   );\n// }\n\n// let pos = { x: Math.random() * WIDTH, y: (Math.random() * HEIGHT) / 2 };\n// fireworks.push(new Firework(pos.x, pos.y));\n"]}